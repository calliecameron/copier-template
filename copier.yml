_min_copier_version: "9.10.2"
_envops:
  keep_trailing_newline: true
  trim_blocks: true
  lstrip_blocks: true
_jinja_extensions:
  - copier_template_extensions.TemplateExtensionLoader
  - cookiecutter.extensions.SlugifyExtension
  - extensions/extensions.py:StrictUndefinedExtension
  - extensions/extensions.py:GitExtension
  - extensions/extensions.py:UvExtension
  - extensions/extensions.py:NvmExtension
  - extensions/extensions.py:ConfigExtension
_subdirectory: template
_message_after_copy: |

  ------
  Template applied successfully. Run 'make' to verify.

  You may also want to run 'make deps_update' in case the versions installed by
  the template are outdated.
_message_after_update: |

  ------
  Template applied successfully. Run 'make' to verify.

  You may also want to run 'make deps_update' in case the versions installed by
  the template are outdated.
_tasks:
  - command: ".template_files/uv_post_install{% if exports_requirements_txt %} --requirements-txt{% endif +%}"
    when: "{{ uses_uv }}"
  - command: .template_files/npm_post_install
    when: "{{ uses_npm }}"

file_type_tags:
  type: yaml
  default: "{{ '' | file_type_tags }}"
  when: false

base_config:
  type: yaml
  default:
    file_types:
      - markdown # README.md
      - json # .vscode/settings.json
    tools:
      - uv
      - copier
      - pre-commit
      - typos
      - bump-my-version
      - gitleaks
      - gitlint
  when: false

config_stage1:
  type: yaml
  default: "{{ base_config | expand_config({}) }}"
  when: false

python_version:
  type: str
  default: "{{ '' | get_python_version }}"
  when: false

node_version:
  type: str
  default: "{{ '' | get_node_version }}"
  when: false

project_name:
  type: str
  help: Project name
  validator: "{% if not project_name %}Project name must not be empty{% endif %}"

project_name_slug:
  type: str
  default: "{{ project_name | slugify }}"
  when: false

author_name:
  type: str
  help: Author name
  default: "{{ '' | get_git_user_name }}"
  validator: "{% if not author_name %}Author name must not be empty{% endif %}"

copyright_start_year:
  type: str
  default: "{{ copyright_start_year | default('%Y' | strftime) }}"
  when: false

copyright_end_year:
  type: str
  default: "{{ '%Y' | strftime }}"
  when: false

detected_config:
  type: yaml
  default: "{{ '' | detect_config }}"
  when: false

config_stage2:
  type: yaml
  default: "{{ detected_config | expand_config(config_stage1) }}"
  when: false

user_has_shell:
  type: bool
  help: Has shell scripts?
  default: "{{ 'shell' in config_stage2['file_types'] }}"
  when: "{{ 'shell' not in config_stage2['file_types'] }}"

user_uses_bats:
  type: bool
  help: Uses bats?
  default: "{{ 'bats' in config_stage2['tools'] }}"
  when: "{{ user_has_shell and 'bats' not in config_stage2['tools'] }}"

user_has_python:
  type: bool
  help: Has python?
  default: "{{ 'python' in config_stage2['file_types'] }}"
  when: "{{ 'python' not in config_stage2['file_types'] }}"

is_python_package:
  type: bool
  help: Is python package? (No for standalone scripts)
  default: false
  when: "{{ user_has_python }}"

user_uses_pytest:
  type: bool
  help: Uses pytest?
  default: "{{ 'pytest' in config_stage2['tools'] }}"
  when: "{{ user_has_python and 'pytest' not in config_stage2['tools'] }}"

exports_requirements_txt:
  type: bool
  help: Exports requirements.txt? (For compatibility with other tools)
  default: false
  when: "{{ user_has_python }}"

user_has_javascript:
  type: bool
  help: Has javascript?
  default: "{{ 'javascript' in config_stage2['file_types'] }}"
  when: "{{ 'javascript' not in config_stage2['file_types'] }}"

user_has_html:
  type: bool
  help: Has HTML?
  default: "{{ 'html' in config_stage2['file_types'] }}"
  when: "{{ 'html' not in config_stage2['file_types'] }}"

user_has_css:
  type: bool
  help: Has CSS?
  default: "{{ 'css' in config_stage2['file_types'] }}"
  when: "{{ 'css' not in config_stage2['file_types'] }}"

user_has_markdown:
  type: bool
  help: Has markdown?
  default: "{{ 'markdown' in config_stage2['file_types'] }}"
  when: "{{ 'markdown' not in config_stage2['file_types'] }}"

user_has_json:
  type: bool
  help: Has json?
  default: "{{ 'json' in config_stage2['file_types'] }}"
  when: "{{ 'json' not in config_stage2['file_types'] }}"

user_has_yaml:
  type: bool
  help: Has yaml?
  default: "{{ 'yaml' in config_stage2['file_types'] }}"
  when: "{{ 'yaml' not in config_stage2['file_types'] }}"

user_has_toml:
  type: bool
  help: Has toml?
  default: "{{ 'toml' in config_stage2['file_types'] }}"
  when: "{{ 'toml' not in config_stage2['file_types'] }}"

user_uses_github_actions:
  type: bool
  help: Uses github actions?
  default: "{{ 'github-actions' in config_stage2['tools'] }}"
  when: "{{ 'github-actions' not in config_stage2['tools'] }}"

github_repo:
  type: str
  help: GitHub repo (in the form '<user>/<repo>')
  validator: "{% if github_repo.split('/') | length != 2 %}GitHub repo must be in the form '<user>/<repo>'{% endif %}"
  when: "{{ user_uses_github_actions }}"

user_config:
  type: yaml
  default: |
    file_types:
      {% if user_has_shell %}
      - shell
      {% endif %}
      {% if user_has_python %}
      - python
      {% endif %}
      {% if user_has_javascript %}
      - javascript
      {% endif %}
      {% if user_has_html %}
      - html
      {% endif %}
      {% if user_has_css %}
      - css
      {% endif %}
      {% if user_has_markdown %}
      - markdown
      {% endif %}
      {% if user_has_json %}
      - json
      {% endif %}
      {% if user_has_yaml %}
      - yaml
      {% endif %}
      {% if user_has_toml %}
      - toml
      {% endif %}
    tools:
      {% if user_uses_bats %}
      - bats
      {% endif %}
      {% if user_uses_pytest %}
      - pytest
      {% endif %}
      {% if user_uses_github_actions %}
      - github-actions
      {% endif %}
  when: false

config:
  type: yaml
  default: "{{ user_config | expand_config(config_stage2) }}"
  when: false

python_packages:
  type: yaml
  default: "{{ config | python_packages }}"
  when: false

node_packages:
  type: yaml
  default: "{{ config | node_packages }}"
  when: false

has_shell:
  type: bool
  default: "{{ 'shell' in config['file_types'] }}"
  when: false

has_python:
  type: bool
  default: "{{ 'python' in config['file_types'] }}"
  when: false

has_javascript:
  type: bool
  default: "{{ 'javascript' in config['file_types'] }}"
  when: false

has_html:
  type: bool
  default: "{{ 'html' in config['file_types'] }}"
  when: false

has_css:
  type: bool
  default: "{{ 'css' in config['file_types'] }}"
  when: false

has_markdown:
  type: bool
  default: "{{ 'markdown' in config['file_types'] }}"
  when: false

has_json:
  type: bool
  default: "{{ 'json' in config['file_types'] }}"
  when: false

has_yaml:
  type: bool
  default: "{{ 'yaml' in config['file_types'] }}"
  when: false

has_toml:
  type: bool
  default: "{{ 'toml' in config['file_types'] }}"
  when: false

uses_uv:
  type: bool
  default: "{{ 'uv' in config['tools'] }}"
  when: false

uses_copier:
  type: bool
  default: "{{ 'copier' in config['tools'] }}"
  when: false

uses_pre_commit:
  type: bool
  default: "{{ 'pre-commit' in config['tools'] }}"
  when: false

uses_python_license_checker:
  type: bool
  default: "{{ 'python-license-checker' in config['tools'] }}"
  when: false

uses_npm:
  type: bool
  default: "{{ 'npm' in config['tools'] }}"
  when: false

uses_node_license_checker:
  type: bool
  default: "{{ 'node-license-checker' in config['tools'] }}"
  when: false

uses_prettier:
  type: bool
  default: "{{ 'prettier' in config['tools'] }}"
  when: false

uses_shellcheck:
  type: bool
  default: "{{ 'shellcheck' in config['tools'] }}"
  when: false

uses_shfmt:
  type: bool
  default: "{{ 'shfmt' in config['tools'] }}"
  when: false

uses_bats:
  type: bool
  default: "{{ 'bats' in config['tools'] }}"
  when: false

uses_ruff:
  type: bool
  default: "{{ 'ruff' in config['tools'] }}"
  when: false

uses_mypy:
  type: bool
  default: "{{ 'mypy' in config['tools'] }}"
  when: false

uses_pytest:
  type: bool
  default: "{{ 'pytest' in config['tools'] }}"
  when: false

uses_eslint:
  type: bool
  default: "{{ 'eslint' in config['tools'] }}"
  when: false

uses_htmlvalidate:
  type: bool
  default: "{{ 'htmlvalidate' in config['tools'] }}"
  when: false

uses_stylelint:
  type: bool
  default: "{{ 'stylelint' in config['tools'] }}"
  when: false

uses_markdownlint:
  type: bool
  default: "{{ 'markdownlint' in config['tools'] }}"
  when: false

uses_yamllint:
  type: bool
  default: "{{ 'yamllint' in config['tools'] }}"
  when: false

uses_tombi:
  type: bool
  default: "{{ 'tombi' in config['tools'] }}"
  when: false

uses_typos:
  type: bool
  default: "{{ 'typos' in config['tools'] }}"
  when: false

uses_bump_my_version:
  type: bool
  default: "{{ 'bump-my-version' in config['tools'] }}"
  when: false

uses_gitleaks:
  type: bool
  default: "{{ 'gitleaks' in config['tools'] }}"
  when: false

uses_github_actions:
  type: bool
  default: "{{ 'github-actions' in config['tools'] }}"
  when: false

uses_actionlint:
  type: bool
  default: "{{ 'actionlint' in config['tools'] }}"
  when: false

uses_zizmor:
  type: bool
  default: "{{ 'zizmor' in config['tools'] }}"
  when: false

uses_gha_update:
  type: bool
  default: "{{ 'gha-update' in config['tools'] }}"
  when: false

uses_gitlint:
  type: bool
  default: "{{ 'gitlint' in config['tools'] }}"
  when: false

has_test_dir:
  type: bool
  default: "{{ uses_bats or uses_pytest }}"
  when: false
